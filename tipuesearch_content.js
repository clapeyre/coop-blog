var tipuesearch = {"pages":[{"title":"About","text":"COOP encompasses a wide array of activities, including Computer Science and Engineering , High Performance Computing and Data Science for Computational Physics . Lots of great people work at COOP , such as Riri, Fifi and Loulou.","tags":"pages","url":"https://clapeyre.github.io/coop-blog/about","loc":"https://clapeyre.github.io/coop-blog/about"},{"title":"Setting up AVBP on your MAC","text":"I7IQuG9K+hFjikfN0/V3fg==;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;&#94; Password Decrypt","tags":"Tutorials","url":"https://clapeyre.github.io/coop-blog/avbp-on-mac","loc":"https://clapeyre.github.io/coop-blog/avbp-on-mac"},{"title":"Python FAQ","text":"Ok I have a python3 environment, but I am lost! I am stuck, who can help me? Just google the question !. As the community is extremely active, most of the problems are already documented. https://docs.python.org : the official website stackoverflow : where most of real-life problems are already solved fullstackpython : a hub for many other python ressources. How do I solve an error? A python error comes with a traceback , i.e. the list of calls that ended to an error. Read the traceback from the bottom. Using this example: Traceback : tests / test_guiform . py : 5 : in < module > from opentea.gui_forms.otinker import main_otinker src / opentea / gui_forms / otinker . py : 7 : in < module > from opentea.gui_forms.root_widget import OTRoot src / opentea / gui_forms / root_widget . py : 70 : in < module > from tiny_3d_engine import ( Engine3D , load_file_as_scene ) E ImportError : cannot import name 'load_file_as_scene' from 'tiny_3d_engine' ( / usr / local / lib / python3 . 7 / site - packages / tiny_3d_engine - 0.1 . 0 - py3 . 7. egg / tiny_3d_engine / __init__ . py ) This is an Importation error ( ImportError ). The function load_file_as_scene was not found in the package tiny_3d_engine-0.1.0 . The caller program opentea/gui_forms/root_widget.py isasking for something which does not exists in this distribution. Nota: This illustrates a dependency error. Opentea should have forced a version requirement (tiny_3d_engine>=0) before relying on a new feature. If you ask for help or report a bug, make sure you keep the traceback with you. How to manage my python environment? We encourage the use of pip . See the official documentation . How can I know what is in my python environment? Use pip list . The output will look like: tiny-3d-engine 0 .1.0 /Users/dauptain/GITLAB/tiny_3d_engine/src tqdm 4 .45.0 Tree 0 .2.4 twine 3 .1.1 typed-ast 1 .4.1 You see in this list, three columns. In the first, the name of the packages installed. In the second, the version. If a path is present in the third column (here tiny-3d-engine ), the package is run from specific sources in your computer. . If the column is void, this package is installed in the site_packages forlder of your python environment. What is an installation in \"Develop\" mode, vs \"Install\" mode.? The \"install\" mode is the most common situation. It is in very short a \"read only mode\" . You installed the package either via pip install from the Python Package Index , or via python setup.py install from the sources. In \"develop\" mode, you are running a package from the sources. It is in very short a \"read AND WRITE mode\" This is useful if you are developing this package (editing the sources). You can read the answer to this develop vs install question on stackoverflow.","tags":"Python3","url":"https://clapeyre.github.io/coop-blog/python-faq","loc":"https://clapeyre.github.io/coop-blog/python-faq"},{"title":"Notebooks","text":"Notebooks are useful material for self trainings. They are made of text and executable code boxes. How to use them? A public notebook has to be on a public Github repository. To use them, you must go on Nbviewer and paste the link to the notebook. On the new window, the notebook appears but the code boxes are not executable. Click on the Binter button on the top right of the window. On the new window, code boxes are executable. Links to notebooks Notebooks about Fast Fourier Transform FFT : Generalities FFT : Tips and pitfalls Notebooks about Statistics Mean convergence Notebooks about Python Python classes (to be continued) If you have any suggestions to improve these notebooks or ideas on topics that can be developped through notebooks, please let us know sending a mail at COOP Team","tags":"Tutorials","url":"https://clapeyre.github.io/coop-blog/notebooks","loc":"https://clapeyre.github.io/coop-blog/notebooks"},{"title":"Packaging guide","text":"First things first, you need to properly structure your project. A quick guide on how to structure a python library can be found at the following links: in french and in english . We will take one example: the sample python package…which only purpose is to explain how to properly structure and distribute a project. The sources can be found on GitHub . Here is how the library is structured: qdouasbin@jolly:~/Desktop/sampleproject>find . | sed -e \"s/[&#94;-][&#94;\\/]*\\// |/g\" -e \"s/|\\([&#94; ]\\)/|-\\1/\" . | -tests | | -test_simple.py | | -__init__.py | -MANIFEST.in | -README.md | -setup.py | -tox.ini | -sample | | -__init__.py | | -package_data.dat | -setup.cfg | -LICENSE.txt | -data | | -data_file In short: the repository must contain a setup.py file to easily install your library using the nice and simple install mechanisms described above. You can also specify your configuration in the setup.cfg but the setup.py still need to be present. More info here your sources must be contained in a folder named as the library name (here the sample directory) you want to create, you should have a LICENSE .txt or LICENSE .md explicitly explaining under which software license your packages falls into, the README.md (or README.rst ) should explain what your library does and how you install it. (The MANIFEST.in is you should have a tests folder containing unit tests, the documentation related to you project should be contained in the docs folder a requirement.txt file containing all the dependencies (i.e. the python packages needed by your library) To create a pip-installable package you need to create a setup.py. To test that your setup.py works you need to run the pip install . in the folder containing the setup.py . If it doesn't work you need to: pip uninstall my_project modify the setup.py re-run the pip install . command There are a lot of ways to populate a setup.py file as there are many options. The best option here is to start from an existing one and modify it to your needs. You can take the one of the sample project for example or the template_module example if you have access to Nitrox (you might need to ask the rights to access this repository to Corentin Lapeyre). More on this topic can be found in the setuptools' documentation setuptools' documentation .","tags":"Python3","url":"https://clapeyre.github.io/coop-blog/create-your-own-package","loc":"https://clapeyre.github.io/coop-blog/create-your-own-package"},{"title":"pip installing packages","text":"Python packages have a setup.py file that allows to easily install it while handling the dependencies. To install a package, you commonly use the pip install command. For example, to install numpy you run the following command: ( example_env ) qdouasbin@jolly:~/Python_envs>pip install numpy Collecting numpy Downloading https://files.pythonhosted.org/packages/74/68/2b00ba3c7390354db2a1706291750b6b7e911f6f79c0bd2184ae04f3c6fd/numpy-1.15.4-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl ( 24 .5MB ) 100 % | ████████████████████████████████ | 24 .5MB 35kB/s Installing collected packages: numpy Successfully installed numpy-1.15.4 If you now run the pip list command it shows you that the numpy library has been added to the Python virtual environment: ( example_env ) qdouasbin@jolly:~/Python_envs>pip list numpy ( 1 .15.4 ) pip ( 9 .0.3 ) setuptools ( 39 .0.1 ) By default pip is trying to install from the Pypi : The Python Package Index (PyPI) is a repository of software for the Python programming language. PyPI helps you find and install software developed and shared by the Python community. Package authors use PyPI to distribute their software. You can also install packages from a local repository as long as it contains a setup.py file. For example, let's download a GitHub repository and pip install it from the local repository. Here is the GitHub page of the project: sampleproject on GitHub ( example_env ) qdouasbin@jolly:~/Python_envs>cd ~/ ( example_env ) qdouasbin@jolly:~>git clone https://github.com/pypa/sampleproject Cloning into 'sampleproject' ... remote: Enumerating objects: 12 , done . remote: Counting objects: 100 % ( 12 /12 ) , done . remote: Compressing objects: 100 % ( 12 /12 ) , done . remote: Total 348 ( delta 3 ) , reused 3 ( delta 0 ) , pack-reused 336 Receiving objects: 100 % ( 348 /348 ) , 82 .45 KiB | 654 .00 KiB/s, done . Resolving deltas: 100 % ( 169 /169 ) , done . ( example_env ) qdouasbin@jolly:~>cd sampleproject/ ( example_env ) qdouasbin@jolly:~/sampleproject>ls -l total 64 -rw-r--r-- 1 qdouasbin 3000 1081 15 nov 15 :11 LICENSE.txt -rw-r--r-- 1 qdouasbin 3000 133 15 nov 15 :11 MANIFEST.in -rw-r--r-- 1 qdouasbin 3000 1705 15 nov 15 :11 README.md drwxr-xr-x 3 qdouasbin 3000 96 15 nov 15 :11 data drwxr-xr-x 4 qdouasbin 3000 128 15 nov 15 :11 sample -rw-r--r-- 1 qdouasbin 3000 664 15 nov 15 :11 setup.cfg -rw-r--r-- 1 qdouasbin 3000 8302 15 nov 15 :11 setup.py drwxr-xr-x 4 qdouasbin 3000 128 15 nov 15 :11 tests -rw-r--r-- 1 qdouasbin 3000 1150 15 nov 15 :11 tox.ini The setup.py file contains the all the information needed to install the package. For example, it contains the list of the depedencies to install for the project sampleproject to work. For instance, it contains the following line: install_requires = [ 'peppercorn' ] Which tells us that the package peppercorn is needed and will be installed when installing sampleproject . We can install this project using pip install . : ( example_env ) qdouasbin@jolly:~/sampleproject>pip install . Processing /Users/qdouasbin/sampleproject Collecting peppercorn ( from sampleproject == 1 .2.0 ) Downloading https://files.pythonhosted.org/packages/14/84/d8d9c3f17bda2b6f49406982546d6f6bc0fa188a43d4e3ba9169a457ee04/peppercorn-0.6-py3-none-any.whl Installing collected packages: peppercorn, sampleproject Running setup.py install for sampleproject ... done Successfully installed peppercorn-0.6 sampleproject-1.2.0 ( example_env ) qdouasbin@jolly:~/sampleproject>pip list numpy ( 1 .15.4 ) peppercorn ( 0 .6 ) pip ( 9 .0.3 ) sampleproject ( 1 .2.0 ) setuptools ( 39 .0.1 ) ( example_env ) qdouasbin@jolly:~/sampleproject> We can see that sampleproject and peppercorn have been installed. The line Running setup.py install for sampleproject ... done tells us more about the installation mechanism used here: the pip install command actually run a python setup.py install command. Using the latter command gives more freedom and has a special feature to develop a library. Let's uninstall the sampleproject and peppercorn library. ( example_env ) qdouasbin@jolly:~/sampleproject>pip uninstall peppercorn sampleproject Uninstalling peppercorn-0.6: /Users/qdouasbin/Python_envs/example_env/lib/python3.6/site-packages/peppercorn-0.6.dist-info/INSTALLER /Users/qdouasbin/Python_envs/example_env/lib/python3.6/site-packages/peppercorn-0.6.dist-info/METADATA /Users/qdouasbin/Python_envs/example_env/lib/python3.6/site-packages/peppercorn-0.6.dist-info/RECORD /Users/qdouasbin/Python_envs/example_env/lib/python3.6/site-packages/peppercorn-0.6.dist-info/WHEEL /Users/qdouasbin/Python_envs/example_env/lib/python3.6/site-packages/peppercorn-0.6.dist-info/top_level.txt /Users/qdouasbin/Python_envs/example_env/lib/python3.6/site-packages/peppercorn/__init__.py /Users/qdouasbin/Python_envs/example_env/lib/python3.6/site-packages/peppercorn/__pycache__/__init__.cpython-36.pyc /Users/qdouasbin/Python_envs/example_env/lib/python3.6/site-packages/peppercorn/__pycache__/compat.cpython-36.pyc /Users/qdouasbin/Python_envs/example_env/lib/python3.6/site-packages/peppercorn/__pycache__/tests.cpython-36.pyc /Users/qdouasbin/Python_envs/example_env/lib/python3.6/site-packages/peppercorn/compat.py /Users/qdouasbin/Python_envs/example_env/lib/python3.6/site-packages/peppercorn/tests.py Proceed ( y/n ) ? y Successfully uninstalled peppercorn-0.6 Uninstalling sampleproject-1.2.0: /Users/qdouasbin/Python_envs/example_env/bin/sample /Users/qdouasbin/Python_envs/example_env/lib/python3.6/site-packages/sample/__init__.py /Users/qdouasbin/Python_envs/example_env/lib/python3.6/site-packages/sample/__pycache__/__init__.cpython-36.pyc /Users/qdouasbin/Python_envs/example_env/lib/python3.6/site-packages/sample/package_data.dat /Users/qdouasbin/Python_envs/example_env/lib/python3.6/site-packages/sampleproject-1.2.0-py3.6.egg-info /Users/qdouasbin/Python_envs/example_env/my_data/data_file Proceed ( y/n ) ? y Successfully uninstalled sampleproject-1.2.0 We can install the sampleproject library and its dependencies (namely peppercorn ) using either the python setup.py install or the python setup.py develop The python setup.py install command will copy the compiled files in your python virtual environnement folder. This is equivalent to using pip install . (as pip install . actually runs the python setup.py install command!). The python setup.py develop command will create a symbolic link from the library to your python virtual environnement folder. This allows you to code your library while using it from anywhere on your system.","tags":"Python3","url":"https://clapeyre.github.io/coop-blog/pip-install","loc":"https://clapeyre.github.io/coop-blog/pip-install"},{"title":"Uploading to PyPI","text":"Testing on TestPyPI Once your setup.py works (i.e. that your library shows up in the pip list and that you can import your library in a python script/consol using import my_library ) you can start to think about how to distribute it. Uploading your code to PyPI is the most common way to do so. First, you need to check that the name of your library does not already exists by browsing the PypI website and search for the library name you want to distribute. If there is no result for your library name you are good to go, otherwise you will need to change your library name. Then you need to test that you can properly distribute it on a server. To avoid polluting the PyPI index (that will affect the entire Python community) another server exists for testing this step: TestPyPI You need to ensure that you have the latest version of setuptools and wheel libraries: python3 -m pip install --upgrade setuptools wheel twine Before distributing your project to a server you need to build it locally: python3 setup.py sdist bdist_wheel This will generate distribution archives in the dist directory. To upload you newly-builded library to testPypi you need to use twine : twine upload --repository-url https://test.pypi.org/legacy/ dist/* And you can now install it from this distant server: python3 -m pip install --index-url https://test.pypi.org/simple/ my_project Of course, you should install it on a Python version that does not have the library installed yet! Now let's say an obvious thing: You need to test that you can properly upload to the TestPyPI server and install your library from it before moving to PyPI… If you want more info on this you can read the setuptools' packaging project tutorials . Upload to PyPI To upload your package to PyPI (the REAL Python Index) you need to use the following command: twine upload dist/* This will ask you your PyPI username and password. Once the upload is done you can pip install you package from anywhere (if you have an internet connection of course!): pip install my_project Once you have made a change in your project you might want to re-upload your library to PyPI. To do so you need to: update the version number according to the versioning strategy defined here re-run the python3 setup.py sdist bdist_wheel command, re-run the twine upload dist/my_new_version* command. Et voila!","tags":"Python3","url":"https://clapeyre.github.io/coop-blog/pypi","loc":"https://clapeyre.github.io/coop-blog/pypi"},{"title":"Python virtual environments","text":"What is a Python virtual environment and why you should use it The main change made by passing from Python 2 to Python 3 is the use of virtual environments. The idea is simple: in a virtual environment, you may install a set of libraries which will only work when you are using this environment. The aim of such environments is to facilitate the switching from one environment to the other avoiding problems of compatibility (virtual environments are hermetic, i.e. there is no risk if you change a library on an environment that it impacts another environment). Example: Imagine you have to run two different AVBP simulations, one with the version 7.2 and the other one with version 7.3. With Python 2, after running your first simulation, you should have to change several settings to have the right environment to perform your second simulation (and you would have to change again those settings if you want afterwards to run another simulation with AVBP_7.2). With Python 3 and virtual environments, if you have two different virtual environments, the first one with AVBP_7.2 and the second one with AVBP_7.3 installed on it, you can easily go from one simulation to the other by switching the virtual environment without any problem of compatibility. You only have to set the libraries of your environment once for each version of AVBP . How to install a virtual environment Prerequisites First you have to install Python 3, you can find how to do it on https://www.python.org/downloads/ (we recommand to install version 3.6.X). Make sure you are using the right version of Python with the command ‘which python' python -m venv The command to install a virtual environment is python -m venv -name/location of your environment- . To illustrate how to use it, we will continue with the previous example of a person who needs to make different version of AVBP cohabit: mylogin@mymachine:~>python -m venv ~/avbp7.2 mylogin@mymachine:~>ls avbp7.2 bin/ include/ lib/ pyvenv.cfg This command will create a folder avbp7.2 with inside three folders and a file: bin/ , include/ , lib/ and pyvenv.cfg . Now that you have created your environment, you have to activate it before installing the libraries you need on it. To activate your virtual environment, do as follow: mylogin@mymachine:~>source bin/activate ( avbp7.2 ) mylogin@mymachine:~> You should see at the beginning of the command line the name of your virtual environment. Now you can install every library you need: ( avbp7.2 ) mylogin@mymachine:~>pip install numpy ( avbp7.2 ) mylogin@mymachine:~>pip install scipy ...","tags":"Python3","url":"https://clapeyre.github.io/coop-blog/python-virtual-envs","loc":"https://clapeyre.github.io/coop-blog/python-virtual-envs"},{"title":"Versioning strategy","text":"The versioning strategy at CERFACS is not perfectly homogeneous. However, tools supported and released by COOP tend to follow the semantic versioning strategy. This implies that code versions always consist of exactly 3 numbers X.Y. Z : X is the major version number. This rarely changes, as it implies no backwards compatibility with previous versions. Y is the minor version. This is incremented between OpenTEA releases (but not necessarily), when new features are introduced into the code. This increment should not break backwards compatibility of the code . The GUI however is not guaranteed to be compatible between versions, as a GUI is associated to a version of the code. Z represents patches for bug fixes, configuration updates, and all other changes needed for continued operation. These do not break backwards compatibility and cannot introduce new features in the code. Small tools For many tools and small codes, the increases in versions will occur when needed, as features are requested. Indeed many tools do not evolve quickly enough to receive an evolution for each OpenTEA release. AVBP Large codes such as AVBP however are under constant development. Each version undergoes the following steps: features are implemented through internal development development is paused as tests are performed. These tests are: a one month test sprint for most versions once every 2 years (4 versions) a \" QPF campaign\" occurs a release candidate version is tagged and distributed to all AVBP customers. A 3 month period is given for all feedback. the version is finally considered stable . Note that \"QPFs\", a.k.a Q uality P rogram F orms are an long series of analytical test cases that the code is compared against. AVBP users can access these online . The COOP team provides a development timeline , which is given below for the 3 year period 2018 - 2020.","tags":"Gold Standards","url":"https://clapeyre.github.io/coop-blog/versioning","loc":"https://clapeyre.github.io/coop-blog/versioning"}]};